{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mateo\\\\OneDrive\\\\Desktop\\\\MERN\\\\MERN-course\\\\client\\\\src\\\\components\\\\routing\\\\PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PrivateRoute(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let location = useLocation();\n  const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\n  const loading = useSelector(state => state.auth.loading);\n\n  if (!isAuthenticated && !loading) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  } else {\n    return children;\n  }\n}\n/* const PrivateRoute = ({\r\n    component: Component,\r\n    auth: { isAuthenticated, loading }, ...rest\r\n  }) => {\r\n    <Route {...rest}\r\n    render={props => !isAuthenticated && !loading ? (<Navigate to=\"/login\"/>) : (<Component {...props}/>)}/>\r\n  \r\n\r\n  };\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n}\r\n\r\nconst mappedStateToProps = (state) =>({\r\n    auth: state.auth\r\n})\r\n\r\nexport default connect(mappedStateToProps )(PrivateRoute) */\n\n_s(PrivateRoute, \"lKmk9IXGE1kCmxnyamoDTEkwQ3Q=\", false, function () {\n  return [useLocation, useSelector, useSelector];\n});\n\n_c = PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useSelector","Navigate","useLocation","PrivateRoute","children","location","isAuthenticated","state","auth","loading","from"],"sources":["C:/Users/Mateo/OneDrive/Desktop/MERN/MERN-course/client/src/components/routing/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n \r\nexport default function PrivateRoute({ children }) {\r\n  let location = useLocation();\r\n  const isAuthenticated = useSelector((state) => state.auth.isAuthenticated);\r\n  const loading = useSelector((state) => state.auth.loading);\r\n  if (!isAuthenticated && !loading) {\r\n    return <Navigate to='/login' state={{ from: location }} replace />;\r\n  } else {\r\n    return children;\r\n  }\r\n}\r\n\r\n/* const PrivateRoute = ({\r\n    component: Component,\r\n    auth: { isAuthenticated, loading }, ...rest\r\n  }) => {\r\n    <Route {...rest}\r\n    render={props => !isAuthenticated && !loading ? (<Navigate to=\"/login\"/>) : (<Component {...props}/>)}/>\r\n  \r\n\r\n  };\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n}\r\n\r\nconst mappedStateToProps = (state) =>({\r\n    auth: state.auth\r\n})\r\n\r\nexport default connect(mappedStateToProps )(PrivateRoute) */"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;;AAEA,eAAe,SAASC,YAAT,OAAoC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EACjD,IAAIC,QAAQ,GAAGH,WAAW,EAA1B;EACA,MAAMI,eAAe,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,eAAvB,CAAnC;EACA,MAAMG,OAAO,GAAGT,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,OAAvB,CAA3B;;EACA,IAAI,CAACH,eAAD,IAAoB,CAACG,OAAzB,EAAkC;IAChC,oBAAO,QAAC,QAAD;MAAU,EAAE,EAAC,QAAb;MAAsB,KAAK,EAAE;QAAEC,IAAI,EAAEL;MAAR,CAA7B;MAAiD,OAAO;IAAxD;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CAFD,MAEO;IACL,OAAOD,QAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA7BwBD,Y;UACPD,W,EACSF,W,EACRA,W;;;KAHMG,Y"},"metadata":{},"sourceType":"module"}