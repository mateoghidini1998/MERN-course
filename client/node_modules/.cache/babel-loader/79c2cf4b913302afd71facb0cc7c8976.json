{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from \"../utils/setAuthToken\"; //Load user\n\nexport const loadUSer = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('http://localhost:5000/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register user\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post('http://localhost:5000/api/users', body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUSer());\n    } catch (error) {\n      const errors = error.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; //Login user\n\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    const res = await axios.post('http://localhost:5000/api/auth', body);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    if (err.response && err.response.data && err.response.data.errors) {\n      const errors = err.response.data.errors;\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    } else {\n      // Handle unexpected error structure here\n      console.error('Unexpected error structure:', err);\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUSer","dispatch","localStorage","token","res","get","type","payload","data","error","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","msg","login","loadUser","err","console","logout"],"sources":["C:/Users/Mateo/Desktop/projects/MERN-course/client/src/actions/auth.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from './alert'\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    CLEAR_PROFILE\r\n} from './types'\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n\r\n//Load user\r\n\r\nexport const loadUSer = () => async dispatch => {\r\n    if(localStorage.token){\r\n        setAuthToken(localStorage.token);\r\n    }\r\n\r\n    try {\r\n        const res = await axios.get('http://localhost:5000/api/auth');\r\n\r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type:AUTH_ERROR\r\n        })\r\n    }\r\n}\r\n\r\n//Register user\r\n\r\nexport const register = ( { name, email, password } ) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({ name , email, password });\r\n\r\n    try {\r\n        const res = await axios.post('http://localhost:5000/api/users', body, config);\r\n\r\n        dispatch({\r\n            type: REGISTER_SUCCESS,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(loadUSer());\r\n\r\n    } catch (error) {\r\n\r\n        const errors = error.response.data.errors;\r\n\r\n        if(errors){\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n\r\n        dispatch({\r\n            type:REGISTER_FAIL\r\n        });\r\n    }\r\n}\r\n\r\n//Login user\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const body = { email, password };\r\n\r\n  try {\r\n    const res = await axios.post('http://localhost:5000/api/auth', body);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    if (err.response && err.response.data && err.response.data.errors) {\r\n      const errors = err.response.data.errors;\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    } else {\r\n      // Handle unexpected error structure here\r\n      console.error('Unexpected error structure:', err);\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n \r\n\r\n  // Logout\r\nexport const logout = () => dispatch => {\r\n    dispatch({ type: CLEAR_PROFILE });\r\n    dispatch({ type: LOGOUT });\r\n}\r\n \r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}